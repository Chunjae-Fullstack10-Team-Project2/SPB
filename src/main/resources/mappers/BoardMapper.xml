<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.spb.spb.mapper.BoardMapper">
    <select id="getPostCount" parameterType="net.spb.spb.dto.pagingsearch.PostPageDTO" resultType="java.lang.Integer">
        select count(postIdx) from tbl_post
        <where>
            postState=1 and postCategory = #{postCategory}
            <if test="search_word!=null and search_word!=''">
                and ${search_type} like concat("%", #{search_word}, "%")
            </if>
            <if test="search_date1!=null">
                and date(postCreatedAt) <![CDATA[>=]]> #{search_date1}
            </if>
            <if test="search_date2!=null">
                and date(postCreatedAt) <![CDATA[<=]]> #{search_date2}
            </if>
        </where>
    </select>
    <select id="getPosts" parameterType="net.spb.spb.dto.pagingsearch.PostPageDTO" resultType="net.spb.spb.dto.post.PostDTO">
        select tp.postIdx, tp.postTitle, tp.postContent, tp.postMemberId, tp.postCategory, tp.postReadCnt, tp.postCreatedAt, tp.postUpdatedAt, tp.postState, count(tpl.postLikeIdx) as postLikeCnt
        from tbl_post tp
        left outer join tbl_post_like tpl
        on tp.postIdx = tpl.postLikeRefIdx and tpl.postLikeRefType='POST'
        <where>
            tp.postState=1 and tp.postCategory = #{postCategory}
            <if test="search_word!=null and search_word!=''">
                and tp.${search_type} like concat("%", #{search_word}, "%")
            </if>
            <if test="search_date1!=null">
                and date(tp.postCreatedAt) <![CDATA[>=]]> #{search_date1}
            </if>
            <if test="search_date2!=null">
                and date(tp.postCreatedAt) <![CDATA[<=]]> #{search_date2}
            </if>
        </where>
        group by tp.postIdx
        order by tp.${sort_by} ${sort_direction}
        limit #{page_skip_count}, #{page_size}
    </select>
    <select id="getPostByIdx" parameterType="java.lang.Integer" resultType="net.spb.spb.dto.post.PostDTO">
        select p.postIdx, p.postTitle, p.postContent, p.postMemberId, p.postCategory, p.postReadCnt, p.postCreatedAt, p.postUpdatedAt, p.postState, m.memberProfileImg
        from tbl_post p
        inner join tbl_member m on p.postMemberId = m.memberId
        where 1=1
          and p.postState = 1
          and p.postIdx = #{postIdx}
    </select>
    <select id="getPostByIdxWithLike" parameterType="HashMap" resultType="net.spb.spb.dto.post.PostDTO">
        select tp.postIdx, tp.postTitle, tp.postContent, tp.postMemberId, tp.postCategory, tp.postReadCnt, tp.postCreatedAt, tp.postUpdatedAt, tp.postState, tm.memberProfileImg
             , count(tpl.postLikeIdx) as postLikeCnt, max(case when tpl.postLikeMemberId = #{memberId} then 1 else 0 end) as isLike
        from tbl_post tp
          inner join tbl_member tm on tp.postMemberId = tm.memberId
          left outer join tbl_post_like tpl
          on tp.postIdx = tpl.postLikeRefIdx and tpl.postLikeRefType="POST"
        where 1=1
          and tp.postState = 1
          and tp.postIdx = #{postIdx}
        GROUP BY tpl.postLikeRefIdx
    </select>
    <insert id="insertPost" parameterType="net.spb.spb.domain.PostVO" useGeneratedKeys="true" keyProperty="postIdx">
        insert into tbl_post (postTitle, postContent, postMemberId, postCategory) VALUES (#{postTitle}, #{postContent}, #{postMemberId}, #{postCategory})
    </insert>
    <update id="modifyPost" parameterType="net.spb.spb.domain.PostVO">
        update tbl_post
        set
            postTitle = #{postTitle},
            postContent = #{postContent},
            postUpdatedAt = #{postUpdatedAt}
        where postIdx = #{postIdx}
    </update>
    <update id="deletePost" parameterType="java.lang.Integer">
        update tbl_post
        set postState = 2
        where postIdx = #{postIdx}
    </update>
    <update id="setReadCnt" parameterType="java.lang.Integer">
        update tbl_post
        set postReadCnt = postReadCnt + 1
        where postIdx = #{postIdx}
    </update>
    <insert id="insertPostReport" parameterType="net.spb.spb.domain.ReportVO">
        insert into tbl_report(reportRefType, reportRefIdx, reportMemberId) select 'POST', #{reportRefIdx}, #{reportMemberId}
        from dual
        where not exists (
            select 1
            from tbl_report
            where reportRefType = 'POST' and reportRefIdx = #{reportRefIdx} and reportMemberId = #{reportMemberId}
        )
    </insert>
</mapper>