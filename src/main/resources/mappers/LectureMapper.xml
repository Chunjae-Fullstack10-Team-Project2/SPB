<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.spb.spb.mapper.lecture.LectureMapper">

    <!--강좌 메인 조회-->
    <select id="selectLectureMain" resultType="net.spb.spb.domain.LectureVO">
        select lectureIdx, lectureTitle, lectureDescription, lectureThumbnailImg
        from tbl_lecture
        where lectureIdx = #{lectureIdx}
    </select>
    <!--강좌별 강의 조회-->
    <select id="selectLectureChapter">
        select chapterIdx, chapterName, chapterRuntime
        from tbl_lecture_chapter
        where chapterLectureIdx = #{lectureIdx}
        and chapterState = '1'
        order by chapterIdx asc
    </select>
    <!--북마크 저장-->
    <insert id="addBookmark">
        insert into tbl_bookmark (bookmarkLectureIdx, bookmarkMemberId, bookmarkCreatedAt)
        VALUES (#{lectureIdx}, #{memberId}, NOW())
    </insert>
    <!--북마크 삭제-->
    <delete id="deleteBookmark">
        delete from tbl_bookmark
        where bookmarkLectureIdx = #{lectureIdx}
        and bookmarkMemberId = #{memberId}
    </delete>
    <!--동영상 주소 조회-->
    <select id="getChapterById">
        select chapterIdx, chapterVideo, chapterRuntime
        from tbl_lecture_chapter
        where chapterIdx = #{chapterIdx}
    </select>
    <select id="countValidOrdersForMemberLecture" resultType="int">
        SELECT COUNT(*)
        FROM tbl_order_info oi
        INNER JOIN tbl_order_lecture ol ON oi.orderIdx = ol.orderIdx
        WHERE oi.orderMemberId = #{memberId}
        AND ol.orderLectureIdx = #{lectureIdx}
        AND oi.orderStatus = 'f'
    </select>
    <select id="isLectureOwner" resultType="int">
        SELECT COUNT(*)
        FROM tbl_lecture
        WHERE lectureTeacherId = #{memberId}
          AND lectureIdx = #{lectureIdx}
    </select>
    <select id="getAllLecture">
        select tl.lectureIdx,
        tl.lectureTitle,
        tl.lectureDescription,
        tl.lectureThumbnailImg,
        tl.lectureAmount,
        tm.memberName AS lectureTeacherName,
        tt.teacherSubject AS lectureSubject
        FROM tbl_lecture tl
        JOIN tbl_member tm ON tl.lectureTeacherId = tm.memberId
        join tbl_teacher tt on tl.lectureTeacherId = tt.teacherId
        where 1=1
        and tl.lectureState = '1'
        order by tl.lectureTitle asc
        limit #{pageRequestDTO.pageSkipCount}, #{pageRequestDTO.pageSize}
    </select>
    <select id="getLectureMain">
        select l.lectureIdx,
        l.lectureTitle,
        l.lectureDescription,
        l.lectureThumbnailImg,
        l.lectureAmount,
        m.memberName AS lectureTeacherName,
        t.teacherSubject as lectureSubject
        FROM tbl_lecture l
        JOIN tbl_member m ON l.lectureTeacherId = m.memberId
        join tbl_teacher t on l.lectureTeacherId = t.teacherId
        where 1=1
        <if test="subject != null">
         and  t.teacherSubject = #{subject}
        </if>
        and l.lectureState = '1'
        <if test="searchDTO.searchWord != null">
            AND l.lectureTitle like CONCAT('%', #{searchDTO.searchWord}, '%')
        </if>
        order by l.lectureTitle asc
        limit #{pageRequestDTO.pageSkipCount}, #{pageRequestDTO.pageSize}
    </select>
    <!--과목 전체 조회-->
    <select id="getAllSubject">
        select distinct teacherSubject
        from tbl_teacher
        where 1=1
        order by teacherSubject
    </select>
    <select id="getTotalCount">
        select count(*)
        from tbl_lecture tl
        join tbl_teacher tt on tl.lectureTeacherId = tt.teacherId
        where 1=1
        and tl.lectureState = '1'
        <if test="subject != null">
            AND tt.teacherSubject =#{subject}
        </if>
        <if test="searchDTO.searchType != null">
            AND tl.lectureTitle LIKE CONCAT('%', #{searchDTO.searchWord}, '%')
        </if>
    </select>
    <select id="selectLectureReview">
        select lectureReviewIdx, lectureReviewContent, lectureReviewMemberId, lectureReviewGrade
        from tbl_lecture_review
        where lectureReviewRefIdx = #{lectureIdx}
        and lectureReviewState = 1
        order by lectureReviewMemberId asc
        limit #{pageRequestDTO.pageSkipCount}, 5
    </select>
    <insert id="insertReport">
        insert into tbl_report(reportRefType, reportRefIdx, reportMemberId) select 'LECTURE_REVIEW', #{dto.lectureReviewRefIdx}, #{dto.lectureReviewMemberId}
        from dual
        where not exists (
            select 1
            from tbl_report
        where reportRefType = 'LECTURE_REVIEW' and reportRefIdx = #{dto.lectureReviewRefIdx} and reportMemberId = #{dto.lectureReviewMemberId}
        )
    </insert>
</mapper>    