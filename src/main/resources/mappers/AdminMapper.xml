<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.spb.spb.mapper.AdminMapper">

    <!-- Teacher-->
    <select id="existsByTeacherId" parameterType="string" resultType="java.lang.Integer">
         select count(teacherIdx)
         from tbl_teacher
         where teacherId = #{teacherId}
    </select>

    <insert id="insertTeacher" parameterType="net.spb.spb.domain.TeacherVO">
        insert into tbl_teacher (teacherName, teacherId, teacherIntro, teacherProfileImg,
                                 teacherSubject)
        values (#{teacherName}, #{teacherId}, #{teacherIntro}, #{teacherProfileImg},
                #{teacherSubject})
    </insert>

    <select id="selectTeacherWithoutTeacherProfile" resultType="net.spb.spb.dto.member.MemberDTO">
        SELECT *
        FROM tbl_member m
        WHERE m.memberGrade = 13 and NOT EXISTS (
            SELECT 1
            FROM tbl_teacher t
            WHERE t.teacherId = m.memberId
        );
    </select>

    <select id="selectTeacherWithTeacherProfile" resultType="net.spb.spb.dto.member.MemberDTO">
        SELECT m.memberIdx,
               m.memberId,
               m.memberName,
               m.memberBirth,
               m.memberCreatedAt,
               t.teacherState,
               t.teacherSubject
        FROM tbl_member m
        JOIN tbl_teacher t ON t.teacherId = m.memberId
        WHERE m.memberGrade = 13;
    </select>

    <update id="modifyTeacherProfile" parameterType="net.spb.spb.domain.TeacherVO">
        update tbl_teacher
        set teacherSubject = #{teacherSubject},
            teacherIntro = #{teacherIntro},
            teacherProfileImg = #{teacherProfileImg}
        where teacherId = #{teacherId}
    </update>

    <update id="deleteTeacher" parameterType="string">
        update tbl_teacher
        set teacherState = 2
        where teacherId = #{teacherId}
    </update>

    <update id="restoreTeacher" parameterType="string">
        update tbl_teacher
        set teacherState = 1
        where teacherId = #{teacherId}
    </update>

    <!-- Lecture -->
    <insert id="insertLecture" parameterType="net.spb.spb.domain.LectureVO">
        insert into tbl_lecture (lectureTitle, lectureDescription, lectureTeacherId, lectureThumbnailImg, lectureAmount)
        values (#{lectureTitle}, #{lectureDescription}, #{lectureTeacherId}, #{lectureThumbnailImg}, #{lectureAmount})
    </insert>

    <select id="selectLectureList" parameterType="net.spb.spb.dto.pagingsearch.LecturePageDTO"
            resultType="net.spb.spb.dto.LectureDTO">
        select
        tl.lectureIdx,
        tl.lectureTitle,
        tl.lectureThumbnailImg,
        tl.lectureAmount,
        tl.lectureTeacherId,
        tl.lectureDescription,
        tl.lectureCreatedAt,
        tt.teacherName as lectureTeacherName,
        count(tlc.chapterIdx) as lectureChapterCount,
        tl.lectureState
        from tbl_lecture tl
        inner join tbl_teacher tt on tl.lectureTeacherId = tt.teacherId
        left outer join tbl_lecture_chapter tlc on tl.lectureIdx = tlc.chapterLectureIdx
        <where>
            <if test="search_type != null and search_type != '' and search_word != null and search_word != ''">
                <if test="search_type == 'teacherName'">
                    and tt.teacherName like concat('%', #{search_word}, '%')
                </if>
                <if test="search_type == 'lectureTitle'">
                    and tl.lectureTitle like concat('%', #{search_word}, '%')
                </if>
            </if>
        </where>
        group by tl.lectureIdx, tl.lectureTitle, tt.teacherName
        order by tl.${sort_by} ${sort_direction}
    </select>

    <select id="selectLecture" parameterType="java.lang.Integer"
            resultType="net.spb.spb.dto.LectureDTO">
        select
            tl.lectureIdx,
            tl.lectureTitle,
            tl.lectureThumbnailImg,
            tl.lectureAmount,
            tl.lectureTeacherId,
            tl.lectureDescription,
            tl.lectureCreatedAt,
            tt.teacherName as lectureTeacherName,
            count(tlc.chapterIdx) as lectureChapterCount
        from tbl_lecture tl
                 inner join tbl_teacher tt on tl.lectureTeacherId = tt.teacherId
                 left outer join tbl_lecture_chapter tlc on tl.lectureIdx = tlc.chapterLectureIdx
        where tl.lectureIdx = #{lectureIdx}
        group by tl.lectureIdx, tl.lectureTitle, tt.teacherName
    </select>

    <select id="selectLectureCount" parameterType="net.spb.spb.dto.pagingsearch.LecturePageDTO">
        select count(tl.lectureIdx)
        from tbl_lecture tl
        inner join tbl_teacher tt
        on tl.lectureTeacherId = tt.teacherId
        <where>
            <if test="search_type != null and search_type != '' and search_word != null and search_word != ''">
                <if test="search_type == 'teacherName'">
                    tt.teacherName like concat('%', #{search_word}, '%')
                </if>
                <if test="search_type == 'lectureTitle'">
                    tl.lectureTitle like concat('%', #{search_word}, '%')
                </if>
            </if>
        </where>
    </select>

    <update id="updateLecture" parameterType="net.spb.spb.domain.LectureVO">
        update tbl_lecture
        set lectureTitle = #{lectureTitle},
            lectureDescription = #{lectureDescription},
            lectureTeacherId = #{lectureTeacherId},
            lectureThumbnailImg = #{lectureThumbnailImg},
            lectureAmount = #{lectureAmount}
        where lectureIdx = #{lectureIdx}
    </update>

    <update id="deleteLecture" parameterType="java.lang.Integer">
        update tbl_lecture
        set lectureState = 2
        where lectureIdx = #{lectureIdx}
    </update>

    <update id="restoreLecture" parameterType="java.lang.Integer">
        update tbl_lecture
        set lectureState = 1
        where lectureIdx = #{lectureIdx}
    </update>

    <select id="existsByLectureId" parameterType="java.lang.Integer">
        select count(lectureIdx) from tbl_lecture where lectureIdx = #{lectureIdx}
    </select>

    <!-- Chapter -->
    <insert id="insertChapter" parameterType="net.spb.spb.domain.ChapterVO">
        insert into tbl_lecture_chapter (chapterLectureIdx, chapterName, chapterVideo, chapterRuntime)
        values (#{chapterLectureIdx}, #{chapterName}, #{chapterVideo}, #{chapterRuntime})
    </insert>

    <select id="selectChapterCount" resultType="java.lang.Integer" parameterType="net.spb.spb.dto.pagingsearch.ChapterPageDTO">
        select count(c.chapterIdx)
        from tbl_lecture_chapter c
        inner join tbl_lecture l on c.chapterLectureIdx = l.lectureIdx
        inner join tbl_teacher t on t.teacherId = l.lectureTeacherId
        <where>
            <if test="lectureIdx != null and lectureIdx > 0">
                c.chapterLectureIdx = #{lectureIdx}
            </if>
            <if test="search_type != null and search_type != '' and search_word != null and search_word != ''">
                <choose>
                    <when test="search_type == 'chapterName'">
                        AND c.chapterName LIKE CONCAT('%', #{search_word}, '%')
                    </when>
                    <when test="search_type == 'lectureTitle'">
                        AND l.lectureTitle LIKE CONCAT('%', #{search_word}, '%')
                    </when>
                    <when test="search_type == 'teacherName'">
                        AND t.teacherName LIKE CONCAT('%', #{search_word}, '%')
                    </when>
                </choose>
            </if>
        </where>
    </select>

    <select id="selectChapterList" resultType="net.spb.spb.dto.ChapterDTO" parameterType="net.spb.spb.dto.pagingsearch.ChapterPageDTO">
        select c.chapterIdx,
               c.chapterLectureIdx,
               c.chapterName,
               c.chapterVideo,
               c.chapterRuntime,
               c.chapterState,
               l.lectureTitle,
               t.teacherId
        from tbl_lecture_chapter c
        inner join tbl_lecture l on c.chapterLectureIdx = l.lectureIdx
        inner join tbl_teacher t on t.teacherId = l.lectureTeacherId
        <where>
            <if test="lectureIdx != null and lectureIdx > 0">
                c.chapterLectureIdx = #{lectureIdx}
            </if>
            <if test="search_type != null and search_type != '' and search_word != null and search_word != ''">
                <choose>
                    <when test="search_type == 'chapterName'">
                        AND c.chapterName LIKE CONCAT('%', #{search_word}, '%')
                    </when>
                    <when test="search_type == 'lectureTitle'">
                        AND l.lectureTitle LIKE CONCAT('%', #{search_word}, '%')
                    </when>
                    <when test="search_type == 'teacherName'">
                        AND t.teacherName LIKE CONCAT('%', #{search_word}, '%')
                    </when>
                </choose>
            </if>
        </where>
        order by ${sort_by} ${sort_direction}
        limit #{page_skip_count}, #{page_size}
    </select>

    <select id="selectChapter" parameterType="java.lang.Integer" resultType="net.spb.spb.dto.ChapterDTO">
        select c.chapterIdx,
               c.chapterLectureIdx,
               c.chapterName,
               c.chapterVideo,
               c.chapterRuntime,
               c.chapterState,
               l.lectureTitle
        from tbl_lecture_chapter c
        inner join tbl_lecture l on c.chapterLectureIdx = l.lectureIdx
        where c.chapterIdx = #{chapterIdx}
    </select>

    <update id="updateChapter" parameterType="net.spb.spb.domain.ChapterVO">
        update tbl_lecture_chapter
        set chapterName = #{chapterName},
            chapterVideo = #{chapterVideo},
            chapterRuntime = #{chapterRuntime}
        where chapterLectureIdx = #{chapterLectureIdx}
    </update>

    <update id="deleteChapter" parameterType="java.lang.Integer">
        update tbl_lecture_chapter
        set chapterState = 2
        where chapterIdx = #{chapterIdx}
    </update>

    <update id="restoreChapter" parameterType="java.lang.Integer">
        update tbl_lecture_chapter
        set chapterState = 1
        where chapterIdx = #{chapterIdx}
    </update>

    <!-- Sales -->
    <select id="selectMonthlySales" resultType="map" parameterType="map">
        <choose>
            <!-- DAY: 날짜별 매출 -->
            <when test="timeType == 'DAY'">
                WITH RECURSIVE date_range AS (
                SELECT DATE(#{startDate}) AS selected_date
                UNION ALL
                SELECT DATE_ADD(selected_date, INTERVAL 1 DAY)
                FROM date_range
                WHERE selected_date &lt; #{endDate}
                )
                SELECT
                DATE_FORMAT(d.selected_date, '%Y-%m-%d') AS label,
                COALESCE(SUM(o.orderAmount), 0) AS total
                FROM date_range d
                LEFT JOIN tbl_order_info o
                ON DATE(o.orderCreatedAt) = d.selected_date
                GROUP BY d.selected_date
                ORDER BY d.selected_date
            </when>

            <!-- MONTH/YEAR: 기존 방식 -->
            <otherwise>
                SELECT
                <choose>
                    <when test="timeType == 'YEAR'">
                        DATE_FORMAT(orderCreatedAt, '%Y') AS label
                    </when>
                    <otherwise>
                        DATE_FORMAT(orderCreatedAt, '%Y-%m') AS label
                    </otherwise>
                </choose>,
                SUM(orderAmount) AS total
                FROM tbl_order_info
                WHERE 1=1
                <if test="startDate != null and startDate != ''">
                    AND DATE_FORMAT(orderCreatedAt,
                    <choose>
                        <when test="timeType == 'YEAR'">'%Y'</when>
                        <otherwise>'%Y-%m'</otherwise>
                    </choose>
                    ) &gt;= #{startDate}
                </if>
                <if test="endDate != null and endDate != ''">
                    AND DATE_FORMAT(orderCreatedAt,
                    <choose>
                        <when test="timeType == 'YEAR'">'%Y'</when>
                        <otherwise>'%Y-%m'</otherwise>
                    </choose>
                    ) &lt;= #{endDate}
                </if>
                GROUP BY label
                ORDER BY label
            </otherwise>
        </choose>
    </select>

    <!--  강좌별 고정 -->
    <select id="selectLectureSalesDefault" resultType="map">
        SELECT l.lectureTitle       AS lectureTitle,
               SUM(l.lectureAmount) AS total,
               COUNT(ol.orderIdx)   AS soldCount
        FROM tbl_order_info o
                 JOIN tbl_order_lecture ol ON o.orderIdx = ol.orderIdx
                 JOIN tbl_lecture l ON ol.orderLectureIdx = l.lectureIdx
        WHERE o.orderStatus = 's'
        GROUP BY l.lectureTitle
        ORDER BY total DESC
    </select>

    <select id="selectLectureSales" resultType="map" parameterType="map">
        SELECT l.lectureTitle AS lectureTitle,
        SUM(l.lectureAmount) AS total,
        COUNT(ol.orderIdx) AS soldCount
        FROM tbl_order_info o
        JOIN tbl_order_lecture ol ON o.orderIdx = ol.orderIdx
        JOIN tbl_lecture l ON ol.orderLectureIdx = l.lectureIdx
        WHERE o.orderStatus = 's'
        <if test="startDate != null and endDate != null">
            AND o.orderCreatedAt BETWEEN #{startDate} AND #{endDate}
        </if>
        GROUP BY l.lectureTitle
        ORDER BY total DESC
    </select>

    <select id="selectSalesDetailList" resultType="net.spb.spb.dto.OrderDTO">
        SELECT o.orderIdx, o.orderMemberId, o.orderAmount, o.orderCreatedAt,
        l.lectureIdx, l.lectureTitle, l.lectureAmount
        FROM tbl_order_info o
        JOIN tbl_order_lecture ol ON o.orderIdx = ol.orderIdx
        JOIN tbl_lecture l ON ol.orderLectureIdx = l.lectureIdx
        WHERE o.orderStatus = 's'

        <if test="searchDTO.searchWord != null and searchDTO.searchWord != ''">
            <choose>
                <when test="searchDTO.searchType == 'orderMemberId'">
                    AND o.orderMemberId LIKE CONCAT('%', #{searchDTO.searchWord}, '%')
                </when>
                <when test="searchDTO.searchType == 'lectureTitle'">
                    AND l.lectureTitle LIKE CONCAT('%', #{searchDTO.searchWord}, '%')
                </when>
            </choose>
        </if>

        <if test="searchDTO.startDate != null and searchDTO.endDate != null">
            AND o.orderCreatedAt BETWEEN #{searchDTO.startDate} AND #{searchDTO.endDate}
        </if>

        <choose>
            <when test="searchDTO.sortColumn != null and searchDTO.sortOrder != null">
                ORDER BY
                <choose>
                    <when test="searchDTO.sortColumn == 'orderIdx'"> o.orderIdx </when>
                    <when test="searchDTO.sortColumn == 'orderMemberId'"> o.orderMemberId </when>
                    <when test="searchDTO.sortColumn == 'orderAmount'"> o.orderAmount </when>
                    <when test="searchDTO.sortColumn == 'orderCreatedAt'"> o.orderCreatedAt </when>
                    <when test="searchDTO.sortColumn == 'lectureTitle'"> l.lectureTitle </when>
                    <otherwise> o.orderCreatedAt </otherwise>
                </choose>
                <choose>
                    <when test="searchDTO.sortOrder == 'asc'"> ASC </when>
                    <otherwise> DESC </otherwise>
                </choose>
            </when>
            <otherwise>
                ORDER BY o.orderCreatedAt DESC
            </otherwise>
        </choose>

        LIMIT #{pageDTO.pageSkipCount}, #{pageDTO.pageSize}
    </select>

    <select id="selectSalesDetailCount" resultType="int">
        SELECT COUNT(*)
        FROM tbl_order_info o
        JOIN tbl_order_lecture ol ON o.orderIdx = ol.orderIdx
        JOIN tbl_lecture l ON ol.orderLectureIdx = l.lectureIdx
        WHERE o.orderStatus = 's'
        <if test="searchDTO.searchWord != null and searchDTO.searchWord != ''">
            <choose>
                <when test="searchDTO.searchType == 'orderMemberId'">
                    AND o.orderMemberId LIKE CONCAT('%', #{searchDTO.searchWord}, '%')
                </when>
                <when test="searchDTO.searchType == 'lectureTitle'">
                    AND l.lectureTitle LIKE CONCAT('%', #{searchDTO.searchWord}, '%')
                </when>
            </choose>
        </if>
        <if test="searchDTO.startDate != null and searchDTO.endDate != null">
            AND o.orderCreatedAt BETWEEN #{searchDTO.startDate} AND #{searchDTO.endDate}
        </if>
    </select>

    <select id="selectSalesListForExport">
        SELECT o.orderIdx, o.orderMemberId, l.lectureTitle, o.orderAmount, o.orderCreatedAt
        FROM tbl_order_info AS o
        JOIN tbl_order_lecture ol ON o.orderIdx = ol.orderIdx
        JOIN tbl_lecture l ON ol.orderLectureIdx = l.lectureIdx
        WHERE o.orderStatus = 's'

        <choose>
            <when test="searchType == 'lectureTitle' and searchWord != null and searchWord != ''">
                AND l.lectureTitle LIKE CONCAT('%', #{searchWord}, '%')
            </when>
            <when test="searchType == 'orderMemberId' and searchWord != null and searchWord != ''">
                AND o.orderMemberId LIKE CONCAT('%', #{searchWord}, '%')
            </when>
        </choose>

        <if test="startDate != null and startDate != ''">
            AND o.orderCreatedAt &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND o.orderCreatedAt &lt;= #{endDate}
        </if>

        ORDER BY o.orderCreatedAt DESC
    </select>

    <select id="selectReportedPosts" resultType="net.spb.spb.dto.post.PostDTO" parameterType="net.spb.spb.dto.pagingsearch.PostPageDTO">
        select p.postIdx, p.postTitle, p.postMemberId, p.postReadCnt, p.postCreatedAt, p.postUpdatedAt, p.postState, count(r.reportIdx) as postReportCnt
        from tbl_post p
        inner join tbl_report r on p.postIdx = r.reportRefIdx and r.reportRefType= "POST"
        <where>
            p.postCategory = "FREEBOARD"
            <if test="search_word != null and search_word != '' and search_type != null and search_type != ''">
                and ${search_type} like concat('%', #{search_word}, '%')
            </if>
            <if test="search_date1 != null and search_date1 != ''">
                and date(p.postCreatedAt) <![CDATA[>=]]> #{search_date1}
            </if>
            <if test="search_date2 != null and search_date2 != ''">
                and date(p.postCreatedAt) <![CDATA[<=]]> #{search_date2}
            </if>
        </where>
        GROUP BY
            p.postIdx,
            p.postTitle,
            p.postMemberId,
            p.postReadCnt,
            p.postCreatedAt,
            p.postUpdatedAt,
            p.postState
        <choose>
            <when test="sort_by == 'postTitle'">
                ORDER BY p.postTitle
            </when>
            <when test="sort_by == 'postReadCnt'">
                ORDER BY p.postReadCnt
            </when>
            <when test="sort_by == 'postReportCnt'">
                ORDER BY postReportCnt
            </when>
            <otherwise>
                ORDER BY p.postIdx
            </otherwise>
        </choose>
        <choose>
            <when test="sort_direction == 'asc'"> ASC </when>
            <otherwise> DESC </otherwise>
        </choose>
        limit #{page_skip_count}, #{page_size}
    </select>

    <select id="selectReportedPostsCount" resultType="java.lang.Integer" parameterType="net.spb.spb.dto.pagingsearch.PostPageDTO">
        select count(distinct p.postIdx)
        from tbl_post p
        inner join tbl_report r on p.postIdx = r.reportRefIdx and r.reportRefType= "POST"
        <where>
            p.postCategory = "FREEBOARD"
            <if test="search_word != null and search_word != '' and search_type != null and search_type != ''">
                and ${search_type} like concat('%', #{search_word}, '%')
            </if>
            <if test="search_date1 != null and search_date1 != ''">
                and date(p.postCreatedAt) <![CDATA[>=]]> #{search_date1}
            </if>
            <if test="search_date2 != null and search_date2 != ''">
                and date(p.postCreatedAt) <![CDATA[<=]]> #{search_date2}
            </if>
        </where>
    </select>

    <select id="selectPostByIdx" parameterType="java.lang.Integer" resultType="net.spb.spb.dto.post.PostDTO">
        select p.postIdx, p.postTitle, p.postContent, p.postMemberId, p.postCategory, p.postReadCnt, p.postCreatedAt, p.postUpdatedAt, p.postState, m.memberProfileImg
        from tbl_post p
                 inner join tbl_member m on p.postMemberId = m.memberId
        where 1=1
          and p.postIdx = #{postIdx}
    </select>

    <update id="deletePostByAdmin" parameterType="java.lang.Integer">
        update tbl_post
        set postState = 3
        where postIdx = #{postIdx};
    </update>

    <update id="updateReportState" parameterType="net.spb.spb.domain.ReportVO">
        update tbl_report
        set reportState = #{reportState}
        where reportIdx = #{reportIdx}
    </update>
</mapper>