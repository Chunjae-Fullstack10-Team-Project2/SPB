<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.spb.spb.mapper.AdminMapper">
    <insert id="insertLecture" parameterType="net.spb.spb.domain.LectureVO">
        insert into tbl_lecture (lectureTitle, lectureDescription, lectureTeacherId, lectureThumbnailImg, lectureAmount)
        values (#{lectureTitle}, #{lectureDescription}, #{lectureTeacherId}, #{lectureThumbnailImg}, #{lectureAmount})
    </insert>
    <insert id="insertChapter" parameterType="net.spb.spb.domain.ChapterVO">
        insert into tbl_lecture_chapter (chapterLectureIdx, chapterName, chapterVideo, chapterRuntime)
        values (#{chapterLectureIdx}, #{chapterName}, #{chapterVideo}, #{chapterRuntime})
    </insert>
    <insert id="insertTeacher" parameterType="net.spb.spb.domain.TeacherVO">
        insert into tbl_teacher (teacherName, teacherId, teacherIntro, teacherApproval, teacherProfileImg, teacherSubject)
        values (#{teacherName}, #{teacherId}, #{teacherIntro}, #{teacherApproval}, #{teacherProfileImg}, #{teacherSubject})
    </insert>
    <select id="selectLecture" parameterType="net.spb.spb.dto.pagingsearch.LecturePageDTO" resultType="net.spb.spb.dto.LectureDTO">
        select
            tl.lectureIdx,
            tl.lectureTitle,
            tl.lectureThumbnailImg,
            tl.lectureAmount,
            tl.lectureTeacherId,
            tl.lectureDescription,
            tl.lectureCreatedAt,
            tt.teacherName as lectureTeacherName,
            count(tlc.chapterIdx) as lectureChapterCount
        from tbl_lecture tl
        inner join tbl_teacher tt on tl.lectureTeacherId = tt.teacherId
        left outer join tbl_lecture_chapter tlc on tl.lectureIdx = tlc.chapterLectureIdx
        <where>
            <if test="search_type != null and search_type != '' and search_word != null and search_word != ''">
                <if test="search_type == 'teacherName'">
                    tt.teacherName like concat('%', #{search_word}, '%')
                </if>
                <if test="search_type == 'lectureTitle'">
                    tl.lectureTitle like concat('%', #{search_word}, '%')
                </if>
            </if>
        </where>
        group by tl.lectureIdx, tl.lectureTitle, tt.teacherName
        order by tl.${sort_by} ${sort_direction}
    </select>

    <select id="selectLectureCount" parameterType="net.spb.spb.dto.pagingsearch.LecturePageDTO">
        select count(tl.lectureIdx)
        from tbl_lecture tl
        inner join tbl_teacher tt
        on tl.lectureTeacherId = tt.teacherId
        <where>
            <if test="search_type != null and search_type != '' and search_word != null and search_word != ''">
                <if test="search_type == 'teacherName'">
                    tt.teacherName like concat('%', #{search_word}, '%')
                </if>
                <if test="search_type == 'lectureTitle'">
                    tl.lectureTitle like concat('%', #{search_word}, '%')
                </if>
            </if>
        </where>
    </select>

    <select id="selectTeacherWithoutTeacherProfile" resultType="net.spb.spb.dto.member.MemberDTO">
        SELECT *
        FROM tbl_member m
        WHERE m.memberGrade = 13 and NOT EXISTS (
            SELECT 1
            FROM tbl_teacher t
            WHERE t.teacherId = m.memberId
        );
    </select>

    <select id="selectTeacherWithTeacherProfile" resultType="net.spb.spb.dto.member.MemberDTO">
        SELECT *
        FROM tbl_member m
        WHERE m.memberGrade = 13 and EXISTS (
            SELECT 1
            FROM tbl_teacher t
            WHERE t.teacherId = m.memberId
        );
    </select>

    <update id="modifyTeacherProfile" parameterType="net.spb.spb.domain.TeacherVO">
        update tbl_teacher
        set teacherSubject = #{teacherSubject},
            teacherIntro = #{teacherIntro},
            teacherProfileImg = #{teacherProfileImg}
        where teacherIdx = #{teacherIdx}
    </update>
</mapper>